Nonterminals useless in grammar

    test1


Terminals unused in grammar

    ASSIGNMENT


Rules useless in grammar

   51 test1: %empty
   52      | test1 expr ';'


State 7 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: PROGRAM IDENT vardecllist fundecllist

    2 vardecllist: %empty
    3            | varsdecl
    4            | varsdecl ';' vardecllist

    5 varsdecl: VAR identlist ':' typename

    6 identlist: IDENT
    7          | IDENT ',' identlist

    8 typename: atomictype
    9         | arraytype

   10 atomictype: UNIT_TYPE
   11           | BOOL_TYPE
   12           | INT_TYPE

   13 arraytype: ARRAY '[' rangelist ']' OF atomictype

   14 rangelist: integer RANGELIST_SEPARATOR integer
   15          | integer RANGELIST_SEPARATOR integer ',' rangelist

   16 integer: expr

   17 fundecllist: %empty
   18            | fundecl ';' fundecllist

   19 fundecl: FUNCTION IDENT '(' parlist ')' ':' atomictype vardecllist

   20 parlist: %empty
   21        | par
   22        | par ',' parlist

   23 par: IDENT ':' typename
   24    | REF IDENT ':' typename

   25 exprlist: expr
   26         | expr ',' exprlist

   27 expr: CTE
   28     | '(' expr ')'
   29     | expr opb expr
   30     | opu expr
   31     | IDENT '(' exprlist ')'
   32     | IDENT '(' ')'
   33     | IDENT '[' exprlist ']'
   34     | IDENT

   35 opb: OPB_PLUS
   36    | OP_MINUS
   37    | OPB_STAR
   38    | OPB_DIVIDE
   39    | OPB_POW
   40    | OPB_L
   41    | OPB_L_EQ
   42    | OPB_G
   43    | OPB_G_EQ
   44    | OPB_EQ
   45    | OPB_DIFF
   46    | OPB_AND
   47    | OPB_OR
   48    | OPB_XOR

   49 opu: OP_MINUS
   50    | OPU_NOT


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 19 28 31 32
    ')' (41) 19 28 31 32
    ',' (44) 7 15 22 26
    ':' (58) 5 19 23 24
    ';' (59) 4 18
    '[' (91) 13 33
    ']' (93) 13 33
    error (256)
    CTE <cst_u> (258) 27
    IDENT <str_u> (259) 1 6 7 19 23 24 31 32 33 34
    ASSIGNMENT (260)
    FUNCTION (261) 19
    REF (262) 24
    VAR (263) 5
    UNIT_TYPE (264) 10
    BOOL_TYPE (265) 11
    INT_TYPE (266) 12
    OF (267) 13
    ARRAY (268) 13
    RANGELIST_SEPARATOR (269) 14 15
    PROGRAM (270) 1
    OPB (271)
    OPU (272)
    OP_MINUS (273) 36 49
    OPU_NOT (274) 50
    OPB_POW (275) 39
    OPB_STAR (276) 37
    OPB_DIVIDE (277) 38
    OPB_AND (278) 46
    OPB_PLUS (279) 35
    OPB_OR (280) 47
    OPB_XOR (281) 48
    OPB_L_EQ (282) 41
    OPB_L (283) 40
    OPB_G_EQ (284) 43
    OPB_G (285) 42
    OPB_EQ (286) 44
    OPB_DIFF (287) 45


Nonterminals, with rules where they appear

    $accept (40)
        on left: 0
    program (41)
        on left: 1
        on right: 0
    vardecllist <list_u> (42)
        on left: 2 3 4
        on right: 1 4 19
    varsdecl <vardecl_u> (43)
        on left: 5
        on right: 3 4
    identlist <list_u> (44)
        on left: 6 7
        on right: 5 7
    typename <typename_u> (45)
        on left: 8 9
        on right: 5 23 24
    atomictype <int_u> (46)
        on left: 10 11 12
        on right: 8 13 19
    arraytype <typename_u> (47)
        on left: 13
        on right: 9
    rangelist <list_u> (48)
        on left: 14 15
        on right: 13 15
    integer <int_u> (49)
        on left: 16
        on right: 14 15
    fundecllist <list_u> (50)
        on left: 17 18
        on right: 1 18
    fundecl <fundecl_u> (51)
        on left: 19
        on right: 18
    parlist <list_u> (52)
        on left: 20 21 22
        on right: 19 22
    par <par_u> (53)
        on left: 23 24
        on right: 21 22
    exprlist (54)
        on left: 25 26
        on right: 26 31 33
    expr <cst_u> (55)
        on left: 27 28 29 30 31 32 33 34
        on right: 16 25 26 28 29 30
    opb <int_u> (56)
        on left: 35 36 37 38 39 40 41 42 43 44 45 46 47 48
        on right: 29
    opu <int_u> (57)
        on left: 49 50
        on right: 30


State 0

    0 $accept: . program $end

    PROGRAM  shift, and go to state 1

    program  go to state 2


State 1

    1 program: PROGRAM . IDENT vardecllist fundecllist

    IDENT  shift, and go to state 3


State 2

    0 $accept: program . $end

    $end  shift, and go to state 4


State 3

    1 program: PROGRAM IDENT . vardecllist fundecllist

    VAR  shift, and go to state 5

    $default  reduce using rule 2 (vardecllist)

    vardecllist  go to state 6
    varsdecl     go to state 7


State 4

    0 $accept: program $end .

    $default  accept


State 5

    5 varsdecl: VAR . identlist ':' typename

    IDENT  shift, and go to state 8

    identlist  go to state 9


State 6

    1 program: PROGRAM IDENT vardecllist . fundecllist

    FUNCTION  shift, and go to state 10

    $default  reduce using rule 17 (fundecllist)

    fundecllist  go to state 11
    fundecl      go to state 12


State 7

    3 vardecllist: varsdecl .
    4            | varsdecl . ';' vardecllist

    ';'  shift, and go to state 13

    ';'       [reduce using rule 3 (vardecllist)]
    $default  reduce using rule 3 (vardecllist)


State 8

    6 identlist: IDENT .
    7          | IDENT . ',' identlist

    ','  shift, and go to state 14

    $default  reduce using rule 6 (identlist)


State 9

    5 varsdecl: VAR identlist . ':' typename

    ':'  shift, and go to state 15


State 10

   19 fundecl: FUNCTION . IDENT '(' parlist ')' ':' atomictype vardecllist

    IDENT  shift, and go to state 16


State 11

    1 program: PROGRAM IDENT vardecllist fundecllist .

    $default  reduce using rule 1 (program)


State 12

   18 fundecllist: fundecl . ';' fundecllist

    ';'  shift, and go to state 17


State 13

    4 vardecllist: varsdecl ';' . vardecllist

    VAR  shift, and go to state 5

    $default  reduce using rule 2 (vardecllist)

    vardecllist  go to state 18
    varsdecl     go to state 7


State 14

    7 identlist: IDENT ',' . identlist

    IDENT  shift, and go to state 8

    identlist  go to state 19


State 15

    5 varsdecl: VAR identlist ':' . typename

    UNIT_TYPE  shift, and go to state 20
    BOOL_TYPE  shift, and go to state 21
    INT_TYPE   shift, and go to state 22
    ARRAY      shift, and go to state 23

    typename    go to state 24
    atomictype  go to state 25
    arraytype   go to state 26


State 16

   19 fundecl: FUNCTION IDENT . '(' parlist ')' ':' atomictype vardecllist

    '('  shift, and go to state 27


State 17

   18 fundecllist: fundecl ';' . fundecllist

    FUNCTION  shift, and go to state 10

    $default  reduce using rule 17 (fundecllist)

    fundecllist  go to state 28
    fundecl      go to state 12


State 18

    4 vardecllist: varsdecl ';' vardecllist .

    $default  reduce using rule 4 (vardecllist)


State 19

    7 identlist: IDENT ',' identlist .

    $default  reduce using rule 7 (identlist)


State 20

   10 atomictype: UNIT_TYPE .

    $default  reduce using rule 10 (atomictype)


State 21

   11 atomictype: BOOL_TYPE .

    $default  reduce using rule 11 (atomictype)


State 22

   12 atomictype: INT_TYPE .

    $default  reduce using rule 12 (atomictype)


State 23

   13 arraytype: ARRAY . '[' rangelist ']' OF atomictype

    '['  shift, and go to state 29


State 24

    5 varsdecl: VAR identlist ':' typename .

    $default  reduce using rule 5 (varsdecl)


State 25

    8 typename: atomictype .

    $default  reduce using rule 8 (typename)


State 26

    9 typename: arraytype .

    $default  reduce using rule 9 (typename)


State 27

   19 fundecl: FUNCTION IDENT '(' . parlist ')' ':' atomictype vardecllist

    IDENT  shift, and go to state 30
    REF    shift, and go to state 31

    $default  reduce using rule 20 (parlist)

    parlist  go to state 32
    par      go to state 33


State 28

   18 fundecllist: fundecl ';' fundecllist .

    $default  reduce using rule 18 (fundecllist)


State 29

   13 arraytype: ARRAY '[' . rangelist ']' OF atomictype

    CTE       shift, and go to state 34
    IDENT     shift, and go to state 35
    '('       shift, and go to state 36
    OP_MINUS  shift, and go to state 37
    OPU_NOT   shift, and go to state 38

    rangelist  go to state 39
    integer    go to state 40
    expr       go to state 41
    opu        go to state 42


State 30

   23 par: IDENT . ':' typename

    ':'  shift, and go to state 43


State 31

   24 par: REF . IDENT ':' typename

    IDENT  shift, and go to state 44


State 32

   19 fundecl: FUNCTION IDENT '(' parlist . ')' ':' atomictype vardecllist

    ')'  shift, and go to state 45


State 33

   21 parlist: par .
   22        | par . ',' parlist

    ','  shift, and go to state 46

    $default  reduce using rule 21 (parlist)


State 34

   27 expr: CTE .

    $default  reduce using rule 27 (expr)


State 35

   31 expr: IDENT . '(' exprlist ')'
   32     | IDENT . '(' ')'
   33     | IDENT . '[' exprlist ']'
   34     | IDENT .

    '('  shift, and go to state 47
    '['  shift, and go to state 48

    $default  reduce using rule 34 (expr)


State 36

   28 expr: '(' . expr ')'

    CTE       shift, and go to state 34
    IDENT     shift, and go to state 35
    '('       shift, and go to state 36
    OP_MINUS  shift, and go to state 37
    OPU_NOT   shift, and go to state 38

    expr  go to state 49
    opu   go to state 42


State 37

   49 opu: OP_MINUS .

    $default  reduce using rule 49 (opu)


State 38

   50 opu: OPU_NOT .

    $default  reduce using rule 50 (opu)


State 39

   13 arraytype: ARRAY '[' rangelist . ']' OF atomictype

    ']'  shift, and go to state 50


State 40

   14 rangelist: integer . RANGELIST_SEPARATOR integer
   15          | integer . RANGELIST_SEPARATOR integer ',' rangelist

    RANGELIST_SEPARATOR  shift, and go to state 51


State 41

   16 integer: expr .
   29 expr: expr . opb expr

    OP_MINUS    shift, and go to state 52
    OPB_POW     shift, and go to state 53
    OPB_STAR    shift, and go to state 54
    OPB_DIVIDE  shift, and go to state 55
    OPB_AND     shift, and go to state 56
    OPB_PLUS    shift, and go to state 57
    OPB_OR      shift, and go to state 58
    OPB_XOR     shift, and go to state 59
    OPB_L_EQ    shift, and go to state 60
    OPB_L       shift, and go to state 61
    OPB_G_EQ    shift, and go to state 62
    OPB_G       shift, and go to state 63
    OPB_EQ      shift, and go to state 64
    OPB_DIFF    shift, and go to state 65

    $default  reduce using rule 16 (integer)

    opb  go to state 66


State 42

   30 expr: opu . expr

    CTE       shift, and go to state 34
    IDENT     shift, and go to state 35
    '('       shift, and go to state 36
    OP_MINUS  shift, and go to state 37
    OPU_NOT   shift, and go to state 38

    expr  go to state 67
    opu   go to state 42


State 43

   23 par: IDENT ':' . typename

    UNIT_TYPE  shift, and go to state 20
    BOOL_TYPE  shift, and go to state 21
    INT_TYPE   shift, and go to state 22
    ARRAY      shift, and go to state 23

    typename    go to state 68
    atomictype  go to state 25
    arraytype   go to state 26


State 44

   24 par: REF IDENT . ':' typename

    ':'  shift, and go to state 69


State 45

   19 fundecl: FUNCTION IDENT '(' parlist ')' . ':' atomictype vardecllist

    ':'  shift, and go to state 70


State 46

   22 parlist: par ',' . parlist

    IDENT  shift, and go to state 30
    REF    shift, and go to state 31

    $default  reduce using rule 20 (parlist)

    parlist  go to state 71
    par      go to state 33


State 47

   31 expr: IDENT '(' . exprlist ')'
   32     | IDENT '(' . ')'

    CTE       shift, and go to state 34
    IDENT     shift, and go to state 35
    '('       shift, and go to state 36
    ')'       shift, and go to state 72
    OP_MINUS  shift, and go to state 37
    OPU_NOT   shift, and go to state 38

    exprlist  go to state 73
    expr      go to state 74
    opu       go to state 42


State 48

   33 expr: IDENT '[' . exprlist ']'

    CTE       shift, and go to state 34
    IDENT     shift, and go to state 35
    '('       shift, and go to state 36
    OP_MINUS  shift, and go to state 37
    OPU_NOT   shift, and go to state 38

    exprlist  go to state 75
    expr      go to state 74
    opu       go to state 42


State 49

   28 expr: '(' expr . ')'
   29     | expr . opb expr

    ')'         shift, and go to state 76
    OP_MINUS    shift, and go to state 52
    OPB_POW     shift, and go to state 53
    OPB_STAR    shift, and go to state 54
    OPB_DIVIDE  shift, and go to state 55
    OPB_AND     shift, and go to state 56
    OPB_PLUS    shift, and go to state 57
    OPB_OR      shift, and go to state 58
    OPB_XOR     shift, and go to state 59
    OPB_L_EQ    shift, and go to state 60
    OPB_L       shift, and go to state 61
    OPB_G_EQ    shift, and go to state 62
    OPB_G       shift, and go to state 63
    OPB_EQ      shift, and go to state 64
    OPB_DIFF    shift, and go to state 65

    opb  go to state 66


State 50

   13 arraytype: ARRAY '[' rangelist ']' . OF atomictype

    OF  shift, and go to state 77


State 51

   14 rangelist: integer RANGELIST_SEPARATOR . integer
   15          | integer RANGELIST_SEPARATOR . integer ',' rangelist

    CTE       shift, and go to state 34
    IDENT     shift, and go to state 35
    '('       shift, and go to state 36
    OP_MINUS  shift, and go to state 37
    OPU_NOT   shift, and go to state 38

    integer  go to state 78
    expr     go to state 41
    opu      go to state 42


State 52

   36 opb: OP_MINUS .

    $default  reduce using rule 36 (opb)


State 53

   39 opb: OPB_POW .

    $default  reduce using rule 39 (opb)


State 54

   37 opb: OPB_STAR .

    $default  reduce using rule 37 (opb)


State 55

   38 opb: OPB_DIVIDE .

    $default  reduce using rule 38 (opb)


State 56

   46 opb: OPB_AND .

    $default  reduce using rule 46 (opb)


State 57

   35 opb: OPB_PLUS .

    $default  reduce using rule 35 (opb)


State 58

   47 opb: OPB_OR .

    $default  reduce using rule 47 (opb)


State 59

   48 opb: OPB_XOR .

    $default  reduce using rule 48 (opb)


State 60

   41 opb: OPB_L_EQ .

    $default  reduce using rule 41 (opb)


State 61

   40 opb: OPB_L .

    $default  reduce using rule 40 (opb)


State 62

   43 opb: OPB_G_EQ .

    $default  reduce using rule 43 (opb)


State 63

   42 opb: OPB_G .

    $default  reduce using rule 42 (opb)


State 64

   44 opb: OPB_EQ .

    $default  reduce using rule 44 (opb)


State 65

   45 opb: OPB_DIFF .

    $default  reduce using rule 45 (opb)


State 66

   29 expr: expr opb . expr

    CTE       shift, and go to state 34
    IDENT     shift, and go to state 35
    '('       shift, and go to state 36
    OP_MINUS  shift, and go to state 37
    OPU_NOT   shift, and go to state 38

    expr  go to state 79
    opu   go to state 42


State 67

   29 expr: expr . opb expr
   30     | opu expr .

    OP_MINUS    shift, and go to state 52
    OPB_POW     shift, and go to state 53
    OPB_STAR    shift, and go to state 54
    OPB_DIVIDE  shift, and go to state 55
    OPB_AND     shift, and go to state 56
    OPB_PLUS    shift, and go to state 57
    OPB_OR      shift, and go to state 58
    OPB_XOR     shift, and go to state 59
    OPB_L_EQ    shift, and go to state 60
    OPB_L       shift, and go to state 61
    OPB_G_EQ    shift, and go to state 62
    OPB_G       shift, and go to state 63
    OPB_EQ      shift, and go to state 64
    OPB_DIFF    shift, and go to state 65

    $default  reduce using rule 30 (expr)

    opb  go to state 66


State 68

   23 par: IDENT ':' typename .

    $default  reduce using rule 23 (par)


State 69

   24 par: REF IDENT ':' . typename

    UNIT_TYPE  shift, and go to state 20
    BOOL_TYPE  shift, and go to state 21
    INT_TYPE   shift, and go to state 22
    ARRAY      shift, and go to state 23

    typename    go to state 80
    atomictype  go to state 25
    arraytype   go to state 26


State 70

   19 fundecl: FUNCTION IDENT '(' parlist ')' ':' . atomictype vardecllist

    UNIT_TYPE  shift, and go to state 20
    BOOL_TYPE  shift, and go to state 21
    INT_TYPE   shift, and go to state 22

    atomictype  go to state 81


State 71

   22 parlist: par ',' parlist .

    $default  reduce using rule 22 (parlist)


State 72

   32 expr: IDENT '(' ')' .

    $default  reduce using rule 32 (expr)


State 73

   31 expr: IDENT '(' exprlist . ')'

    ')'  shift, and go to state 82


State 74

   25 exprlist: expr .
   26         | expr . ',' exprlist
   29 expr: expr . opb expr

    ','         shift, and go to state 83
    OP_MINUS    shift, and go to state 52
    OPB_POW     shift, and go to state 53
    OPB_STAR    shift, and go to state 54
    OPB_DIVIDE  shift, and go to state 55
    OPB_AND     shift, and go to state 56
    OPB_PLUS    shift, and go to state 57
    OPB_OR      shift, and go to state 58
    OPB_XOR     shift, and go to state 59
    OPB_L_EQ    shift, and go to state 60
    OPB_L       shift, and go to state 61
    OPB_G_EQ    shift, and go to state 62
    OPB_G       shift, and go to state 63
    OPB_EQ      shift, and go to state 64
    OPB_DIFF    shift, and go to state 65

    $default  reduce using rule 25 (exprlist)

    opb  go to state 66


State 75

   33 expr: IDENT '[' exprlist . ']'

    ']'  shift, and go to state 84


State 76

   28 expr: '(' expr ')' .

    $default  reduce using rule 28 (expr)


State 77

   13 arraytype: ARRAY '[' rangelist ']' OF . atomictype

    UNIT_TYPE  shift, and go to state 20
    BOOL_TYPE  shift, and go to state 21
    INT_TYPE   shift, and go to state 22

    atomictype  go to state 85


State 78

   14 rangelist: integer RANGELIST_SEPARATOR integer .
   15          | integer RANGELIST_SEPARATOR integer . ',' rangelist

    ','  shift, and go to state 86

    $default  reduce using rule 14 (rangelist)


State 79

   29 expr: expr . opb expr
   29     | expr opb expr .

    OP_MINUS    shift, and go to state 52
    OPB_POW     shift, and go to state 53
    OPB_STAR    shift, and go to state 54
    OPB_DIVIDE  shift, and go to state 55
    OPB_AND     shift, and go to state 56
    OPB_PLUS    shift, and go to state 57
    OPB_OR      shift, and go to state 58
    OPB_XOR     shift, and go to state 59
    OPB_L_EQ    shift, and go to state 60
    OPB_L       shift, and go to state 61
    OPB_G_EQ    shift, and go to state 62
    OPB_G       shift, and go to state 63
    OPB_EQ      shift, and go to state 64
    OPB_DIFF    shift, and go to state 65

    $default  reduce using rule 29 (expr)

    opb  go to state 66


State 80

   24 par: REF IDENT ':' typename .

    $default  reduce using rule 24 (par)


State 81

   19 fundecl: FUNCTION IDENT '(' parlist ')' ':' atomictype . vardecllist

    VAR  shift, and go to state 5

    $default  reduce using rule 2 (vardecllist)

    vardecllist  go to state 87
    varsdecl     go to state 7


State 82

   31 expr: IDENT '(' exprlist ')' .

    $default  reduce using rule 31 (expr)


State 83

   26 exprlist: expr ',' . exprlist

    CTE       shift, and go to state 34
    IDENT     shift, and go to state 35
    '('       shift, and go to state 36
    OP_MINUS  shift, and go to state 37
    OPU_NOT   shift, and go to state 38

    exprlist  go to state 88
    expr      go to state 74
    opu       go to state 42


State 84

   33 expr: IDENT '[' exprlist ']' .

    $default  reduce using rule 33 (expr)


State 85

   13 arraytype: ARRAY '[' rangelist ']' OF atomictype .

    $default  reduce using rule 13 (arraytype)


State 86

   15 rangelist: integer RANGELIST_SEPARATOR integer ',' . rangelist

    CTE       shift, and go to state 34
    IDENT     shift, and go to state 35
    '('       shift, and go to state 36
    OP_MINUS  shift, and go to state 37
    OPU_NOT   shift, and go to state 38

    rangelist  go to state 89
    integer    go to state 40
    expr       go to state 41
    opu        go to state 42


State 87

   19 fundecl: FUNCTION IDENT '(' parlist ')' ':' atomictype vardecllist .

    $default  reduce using rule 19 (fundecl)


State 88

   26 exprlist: expr ',' exprlist .

    $default  reduce using rule 26 (exprlist)


State 89

   15 rangelist: integer RANGELIST_SEPARATOR integer ',' rangelist .

    $default  reduce using rule 15 (rangelist)
